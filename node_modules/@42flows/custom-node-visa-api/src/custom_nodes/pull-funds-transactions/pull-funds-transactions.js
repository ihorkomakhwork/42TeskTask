const { pullFundsTransactions } = require('../../api');
const { visaErrorHandler } = require('../../utils');

module.exports = (RED) => {
  function pullFundsTransactionsHandler(config) {
    RED.nodes.createNode(this, config);

    const node = this;

    node.on('input', async (msg) => {
      try {
        const amount = RED.util.evaluateNodeProperty(
          config.amount,
          config.amountType,
          this,
          msg,
        );

        const localTransactionDateTime = RED.util.evaluateNodeProperty(
          config.localTransactionDateTime,
          config.localTransactionDateTimeType,
          this,
          msg,
        );

        const country = RED.util.evaluateNodeProperty(
          config.country,
          config.countryType,
          this,
          msg,
        );

        const zipCode = RED.util.evaluateNodeProperty(
          config.zipCode,
          config.zipCodeType,
          this,
          msg,
        );

        const state = RED.util.evaluateNodeProperty(
          config.state,
          config.stateType,
          this,
          msg,
        );

        const idCode = RED.util.evaluateNodeProperty(
          config.idCode,
          config.idCodeType,
          this,
          msg,
        );

        const cardAcceptorName = RED.util.evaluateNodeProperty(
          config.cardAcceptorName,
          config.cardAcceptorNameType,
          this,
          msg,
        );

        const terminalId = RED.util.evaluateNodeProperty(
          config.terminalId,
          config.terminalIdType,
          this,
          msg,
        );

        const acquirerCountryCode = RED.util.evaluateNodeProperty(
          config.acquirerCountryCode,
          config.acquirerCountryCodeType,
          this,
          msg,
        );

        const acquiringBin = RED.util.evaluateNodeProperty(
          config.acquiringBin,
          config.acquiringBinType,
          this,
          msg,
        );

        const senderCurrencyCode = RED.util.evaluateNodeProperty(
          config.senderCurrencyCode,
          config.senderCurrencyCodeType,
          this,
          msg,
        );

        const retrievalReferenceNumber = RED.util.evaluateNodeProperty(
          config.retrievalReferenceNumber,
          config.retrievalReferenceNumberType,
          this,
          msg,
        );

        const systemsTraceAuditNumber = RED.util.evaluateNodeProperty(
          config.systemsTraceAuditNumber,
          config.systemsTraceAuditNumberType,
          this,
          msg,
        );

        const businessApplicationId = config.businessApplicationId

        const senderPrimaryAccountNumber = RED.util.evaluateNodeProperty(
          config.senderPrimaryAccountNumber,
          config.senderPrimaryAccountNumberType,
          this,
          msg,
        );

        const senderCardExpiryDate = RED.util.evaluateNodeProperty(
          config.senderCardExpiryDate,
          config.senderCardExpiryDateType,
          this,
          msg,
        );

        const body = {
          amount,
          localTransactionDateTime,
          cardAcceptor: {
            address: {
              country,
              zipCode,
              state,
            },
            idCode,
            name: cardAcceptorName,
            terminalId,
          },
          acquirerCountryCode,
          acquiringBin,
          senderCurrencyCode,
          retrievalReferenceNumber,
          systemsTraceAuditNumber,
          businessApplicationId,
          senderPrimaryAccountNumber,
          senderCardExpiryDate,
        };
        const response = await pullFundsTransactions({ body });
        msg.payload = response.data;
        msg.status = response.status;
        node.send([msg]);
      } catch (error) {
        const { errorCode, message, status } = visaErrorHandler(error);
        msg.status = status;
        msg.error = { errorCode, message };
        if (String(status)[0] === '4'){
          node.send([, msg]);
        } else 
       { node.send([, , msg]);}
      }
    });
  }

  RED.nodes.registerType(
    'Pull funds transactions',
    pullFundsTransactionsHandler,
  );
};
