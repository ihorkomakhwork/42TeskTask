const { createAlias } = require('../../api');
const { visaErrorHandler } = require('../../utils');

module.exports = (RED) => {
  function createAliasHandler(config) {
    RED.nodes.createNode(this, config);

    const node = this;

    node.on('input', async (msg) => {
      try {
        const guid = RED.util.evaluateNodeProperty(
          config.guid,
          config.guidType,
          this,
          msg,
        );

        const country = RED.util.evaluateNodeProperty(
          config.country,
          config.countryType,
          this,
          msg,
        );

        const city = RED.util.evaluateNodeProperty(
          config.city,
          config.cityType,
          this,
          msg,
        );

        const consentDateTime = RED.util.evaluateNodeProperty(
          config.consentDateTime,
          config.consentDateTimeType,
          this,
          msg,
        );

        const recipientFirstName = RED.util.evaluateNodeProperty(
          config.recipientFirstName,
          config.recipientFirstNameType,
          this,
          msg,
        );

        const recipientLastName = RED.util.evaluateNodeProperty(
          config.recipientLastName,
          config.recipientLastNameType,
          this,
          msg,
        );

        const recipientPrimaryAccountNumber = RED.util.evaluateNodeProperty(
          config.recipientPrimaryAccountNumber,
          config.recipientPrimaryAccountNumberType,
          this,
          msg,
        );

        const issuerName = RED.util.evaluateNodeProperty(
          config.issuerName,
          config.issuerNameType,
          this,
          msg,
        );

        const filedAlias = RED.util.evaluateNodeProperty(
          config.filedAlias,
          config.filedAliasType,
          this,
          msg,
        );

        const cardType = RED.util.evaluateNodeProperty(
          config.cardType,
          config.cardTypeType,
          this,
          msg,
        );

        const aliasType = RED.util.evaluateNodeProperty(
          config.aliasType,
          config.aliasTypeType,
          this,
          msg,
        );

        const body = {
          guid,
          country,
          city,
          consentDateTime,
          recipientFirstName,
          recipientLastName,
          recipientPrimaryAccountNumber,
          issuerName,
          alias: filedAlias,
          cardType,
          aliasType,
        };

        const response = await createAlias({ body });
        msg.payload = response.data;
        msg.status = response.status;
        node.send([msg]);
      } catch (error) {
        const { errorCode, message, status } = visaErrorHandler(error);
        msg.status = status;
        msg.error = { errorCode, message };
        if (String(status)[0] === '4'){
          node.send([, msg]);
        } else 
       { node.send([, , msg]);}
      }
    });
  }

  RED.nodes.registerType('Create alias', createAliasHandler);
};
