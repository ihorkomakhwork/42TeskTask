const { cardValidation } = require('../../api');
const { visaErrorHandler } = require('../../utils');

module.exports = (RED) => {
  function cardValidationHandler(config) {
    RED.nodes.createNode(this, config);
    const node = this;
    node.on('input', async (msg) => {
      try {
        const {
          country = RED.util.evaluateNodeProperty(
            config.country,
            config.countryType,
            this,
            msg,
          ),
          zipCode = RED.util.evaluateNodeProperty(
            config.zipCode,
            config.zipCodeType,
            this,
            msg,
          ),
          city = RED.util.evaluateNodeProperty(
            config.city,
            config.cityType,
            this,
            msg,
          ),
          idCode = RED.util.evaluateNodeProperty(
            config.idCode,
            config.idCodeType,
            this,
            msg,
          ),
          name = RED.util.evaluateNodeProperty(
            config.cardAcceptorName,
            config.cardAcceptorNameType,
            this,
            msg,
          ),
          primaryAccountNumber = RED.util.evaluateNodeProperty(
            config.primaryAccountNumber,
            config.primaryAccountNumberType,
            this,
            msg,
          ),
          state = RED.util.evaluateNodeProperty(
            config.state,
            config.stateType,
            this,
            msg,
          ),
          terminalId = RED.util.evaluateNodeProperty(
            config.terminalId,
            config.terminalIdType,
            this,
            msg,
          ),
          postalCode = RED.util.evaluateNodeProperty(
            config.postalCode,
            config.postalCodeType,
            this,
            msg,
          ),
        } = {};

        const body = {
          cardAcceptor: {
            address: {
              country,
              zipCode,
              city,
              state,
            },
            idCode,
            name,
            terminalId,
          },
          primaryAccountNumber,
          addressVerificationResults: {
            postalCode,
          },
        };
        const response = await cardValidation({ body });

        msg.payload = response.data;
        msg.status = response.status;
        node.send([msg]);
      } catch (error) {
        const { errorCode, message, status } = visaErrorHandler(error);
        msg.status = status;
        msg.error = { errorCode, message };
        if (String(status)[0] === '4'){
          node.send([, msg]);
        } else 
       { node.send([, , msg]);}
      }
    });
  }

  RED.nodes.registerType('Card validation', cardValidationHandler);
};
